#!/usr/bin/env ansible-playbook
---

- name: Configuring the base
  hosts: localhost
  tasks:
  - name: Adding a key pair
    ec2_key:
      name: ec2_default
      key_material: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDGL17uwMs/YfCSlJ8AgB8RhYG5ta9yVpaSex/ZkD5RpZWZ76tCEns83DRNnbB116zB/wFO3mOHz9VXwZOUEdZUF3sxw/0PgYPu7FdR+qQmmlnHB70AHY2KFJgJQ8AlIVZsc3mMeOr0hu/W1Q2C3bkF5nYQ22Wg7/eZ5wJUyNlUbJSRH8CCZvdlwY2d4Fo2vIFowMf41tpwTyJFUT9aCqsDK3/lyKILeZdhjh4rsBImMORWqTOHy4lpY2NQEsaFSjI6OnnXK+tCzJzFwdMK5WoeDzkNtNwI17NlES/IM8m6fmfwJGIIn4UxQp5M1eACYk0eJD3WYXyEX9RjOWbGIgPRvxtvi+TCTGYYTs/JUbcLpq6ZR14f7jyvzVK1PJq+X0bDym9/hVDXf603s8KB6eWY4NE4M/BA7HFRBUK1iL87nizBD33We08qc7XSY4S1yeMXbJ133p/pPNuU7ZtAYvyBCNnWj0tQXfkYqS9bfOl55M6/wYF+qGEB91zk/UsQLU3rz6O9hdkyeMM4gYx9cmr7lRCbP+5X90gRUMjNlC6bnVluvntmGLeDrg+E6/EuDCgCHz53XLBZ9Nf2EMLYe7SEfQ3UtM7auhtOPfS8UPJqHe9dFGz6HHWR50XF9pt4WjAD8KYdWMMGYt1VoH9QW+dxkjERTtDzdkTjsfHgVOM+vw== ec2'
      state: present
  - name: Creating a security group
    ec2_group:
      name: security_group_default
      description: archlinux
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: icmp
          from_port: -1
          to_port:  -1
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
    register: basic_firewall
  - name: Creating the instance
    ec2:
      key_name: ec2_default
      exact_count: 1
      count_tag:
        Name: archlinux
      instance_tags:
        Name: archlinux
      instance_type: c4.large
      image: ami-d763a7b8
      wait: yes
      group_id: "{{ basic_firewall.group_id }}"
      volumes:
        - device_name: /dev/sdb
          volume_type: gp2
          volume_size: 100
          delete_on_termination: true
    register: ec2
    tags: ec2
  - name: Add new instance to host group
    add_host:
      hostname: "{{ item.public_ip }}"
      groupname: aurbs
      ansible_user: root
      ansible_ssh: "{{ item.public_ip }}"
      ansible_hostname: "{{ item.public_ip }}"
    with_items: "{{ ec2.instances }}"

  - name: Wait for SSH to come up
    wait_for:
      host: "{{ item.public_dns_name }}"
      port: 22
      delay: 60
      timeout: 320
      state: started
    with_items: "{{ ec2.instances }}"
- name: Setting up AurBS
  hosts: aurbs
  remote_user: root
  gather_facts: yes
  vars:
    makepkg_nonroot_user: aurbs
  pre_tasks:
    - name: 'install python2'
      raw: pacman -Sy --noconfirm --needed python2
  tasks:
    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present
    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    - name: Add sudoers users to wheel group
      user: name=aurbs group=daemon groups=wheel append=yes state=present home=/var/cache/aurbs shell=/bin/bash
    - name: Installing pacman dependencies
      pacman:
        name: devtools,rsync,python-setuptools,python-simplejson,python-yaml,python-pymongo,python-flask,pyalpm,ccache,sudo,yaourt,git,wget,lighttpd,mongodb,unzip,arch-install-scripts,curl,lftp,package-query
        update_cache: yes
    - name: Creating directories for second volume
      file: path=/mnt/var state=directory
    - name: Check if second volume already formated
      shell: lsblk -as /dev/xvdb -o FSTYPE | grep -q ext4 && echo Present || echo Absent
      register: checkpartition
      changed_when: false
    - name: Formating the second volume
      command: "mkfs -t ext4 /dev/xvdb"
      when: checkpartition.stdout == "Absent"
    - name: Mounting the second volume
      mount:
        name: /mnt/var
        src: /dev/xvdb
        fstype: ext4
        state: mounted
    - name: Synchronize /var and /mnt/var
      synchronize:
        src: /var
        dest: /mnt
        rsync_opts:
          - "--one-file-system"
          - "-P"
      delegate_to: "{{ inventory_hostname }}"
    - name: Unmounting the second volume
      mount:
        name: /mnt/var
        src: /dev/xvdb
        fstype: ext4
        state: unmounted
    - name: Remove /var
      file:
        path: /var
        state: absent
    - name: Mounting the second volume to /var
      mount:
        name: /var
        src: /dev/xvdb
        fstype: ext4
        state: mounted
    - name: Upgrading the system
      pacman: update_cache=yes upgrade=yes
    - name: set timezone to Asia/Tokyo
      timezone:
        name: Europe/Paris
    - name: install yaourt
      include: aur/pkg.yml pkg_name=yaourt
    - name: install python-flup-hg
      include: aur/pkg.yml pkg_name=python-flup-hg
    - name: Cloning the AurBS repository
      git:
        repo: https://github.com/unixfox/aurbs.git
        dest: /tmp/aurbs
    - name: Installing AurBS
      make:
        chdir: /tmp/aurbs
        target: install
    - name: Copy the template of lighttpd
      command: cp /tmp/aurbs/templates/lighttpd.conf.sample /etc/lighttpd/lighttpd.conf
    - name: Set PACKAGER to MAKEPKG config file
      lineinfile:
        dest: /etc/makepkg.conf
        state: present
        regexp: '^PACKAGER'
        line: 'PACKAGER="Emilien Devos <contact@emiliendevos.be>"'
    - name: Enabling at boot and starting mongodb
      systemd: state=started name=mongodb enabled=yes
    - name: Downloading the startup script
      get_url:
        url: https://github.com/unixfox/aur/raw/master/aurbs.sh
        dest: /var/cache/aurbs/start.sh
        mode: 0764
    - name: Giving permissions to AurBS user [1]
      file:
        path: /var/cache/aurbs
        state: directory
        owner: aurbs
        group: daemon
        mode: 0755
        recurse: yes
    - name: Giving permissions to AurBS user [2]
      file:
        path: /var/lib/aurbs
        state: directory
        owner: aurbs
        group: daemon
        recurse: yes
    - name: Giving permissions to AurBS user [3]
      file:
        path: /etc/aurbs.yml
        owner: aurbs
        group: daemon
    - name: Downloading the systemd service
      get_url:
        url: https://github.com/unixfox/aur/raw/master/aurbs.service
        dest: /etc/systemd/system/aurbs.service
        mode: 0764
    - name: Downloading the systemd timer
      get_url:
        url: https://github.com/unixfox/aur/raw/master/aurbs.timer
        dest: /etc/systemd/system/aurbs.timer
        mode: 0764
    - name: Creating the log directory for AurBS
      file: path=/var/log/aurbs owner=aurbs group=daemon state=directory
    - name: Activating the cron like for AurBS
      systemd:
        name: aurbs.timer
        daemon_reload: yes
        enabled: yes
        state: started
        masked: no
    - name: Adding FTP credentials to profile
      blockinfile:
        dest: /etc/profile
        insertafter: EOF
        block: |
          export FTP_USER={{ lookup('env','FTP_USER') }}
          export FTP_PASSWORD={{ lookup('env','FTP_PASSWORD') }}
          export FTP_HOST={{ lookup('env','FTP_HOST') }}
    - name: Starting the AurBS build
      systemd:
        name: aurbs.service
        state: started
    - name: Enabling at boot and starting lighttpd
      systemd: state=started name=lighttpd enabled=yes
    - name: Removing the old IP of the record on Cloudflare
      cloudflare_dns:
        zone: unixfox.eu
        record: aurbs
        type: A
        state: absent
        account_email: mimidevos2@gmail.com
        account_api_token: "{{ lookup('env','cloudflare_api_key') }}"
      register: record
    - name: Updating the IP of the EC2 instance to CloudFlare
      cloudflare_dns:
        zone: unixfox.eu
        record: aurbs
        type: A
        value: "{{ ansible_ssh }}"
        account_email: mimidevos2@gmail.com
        account_api_token: "{{ lookup('env','cloudflare_api_key') }}"
      register: record